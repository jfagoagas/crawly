# Go
# Build your Go project.
# Add steps that test, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/go

trigger:
- master

pool:
  vmImage: 'ubuntu-latest'

variables:
  GOBIN:  '$(GOPATH)/bin' # Go binaries path
  GOROOT: '/usr/local/go1.11' # Go installation path
  GOPATH: '$(system.defaultWorkingDirectory)/gopath' # Go workspace path
  modulePath: '$(GOPATH)/src/github.com/$(build.repository.name)' # Path to the module's code

steps:
- script: |
    mkdir -p '$(GOBIN)'
    mkdir -p '$(GOPATH)/pkg'
    mkdir -p '$(modulePath)'
    shopt -s extglob
    shopt -s dotglob
    mv !(gopath) '$(modulePath)'
    echo '##vso[task.prependpath]$(GOBIN)'
    echo '##vso[task.prependpath]$(GOROOT)/bin'
  displayName: 'Set up the Go workspace'

- script: |
    go version
    go get -v -t -d ./...
    if [ -f Gopkg.toml ]; then
        curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
        dep ensure
    fi
    go build -v .
  workingDirectory: '$(modulePath)'
  displayName: 'Get dependencies, then build'

- script: |
  go get -u golang.org/x/tools/go/analysis/passes/shadow/cmd/shadow golang.org/x/lint/golint honnef.co/go/tools/cmd/staticcheck github.com/kisielk/errcheck github.com/securego/gosec/cmd/gosec
  
  workingDirectory: '$(modulePath)'
  displayName: 'Install tools'

- script: |
  golintout="$(gofmt -s -l .)";
  if [ -n "$golintout" ]; then
    awk '{ print $0": format check failed" }' <<< $golintout
    exit 1
  fi
  workingDirectory: '$(modulePath)'
  displayName: 'Run gofmt'

- script: |
    go vet 
  workingDirectory: '$(modulePath)'
  displayName: 'Run go vet'

- script: |
    go vet -vettool $(which shadow)
  workingDirectory: '$(modulePath)'
  displayName: 'Run go vet -vettool shadow'

- script: |
    #curl -sfL https://raw.githubusercontent.com/securego/gosec/master/install.sh | sh -s -- -b $GOPATH/bin latest 
  workingDirectory: '$(modulePath)'
  displayName: 'Get gosec tool'

- script: |
    golint -set_exit_status ./...
  workingDirectory: '$(modulePath)'
  displayName: 'Run golint'

  - script: |
    staticcheck ./...
  workingDirectory: '$(modulePath)'
  displayName: 'Run staticcheck'

  - script: |
    errcheck ./... 
  workingDirectory: '$(modulePath)'
  displayName: 'Run errcheck'

- script: |
    gosec -exclude G402 -quiet -fmt=golint ./... 
  workingDirectory: '$(modulePath)'
  displayName: 'Go sec'






